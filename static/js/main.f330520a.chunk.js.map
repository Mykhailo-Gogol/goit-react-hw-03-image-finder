{"version":3,"sources":["components/SearchBar/index.js","components/Modal/index.js","components/ImageGalleryItem/index.js","components/Spinner/index.js","components/Button/index.js","components/ImageGallery/index.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","handleFormSubmit","useState","inputValue","setInputValue","className","onSubmit","event","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","e","target","Modal","largeImageURL","handleModalClose","onClick","src","alt","ImageGalleryItem","webformatURL","tags","isOpen","setIsOpen","defaultProps","Spinner","color","height","width","delay","Button","handleLoadMoreImages","window","scrollTo","top","document","documentElement","scrollHeight","behavior","ImageGallery","images","setImages","loading","setLoading","page","setPage","useEffect","axios","get","then","response","data","hits","message","console","log","map","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f330520a.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SearchBar = ({ handleFormSubmit }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    const { value } = e.target;\n    setInputValue(value);\n    return value;\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    handleFormSubmit(inputValue);\n  };\n\n  return (\n    <>\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={handleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n          <input\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n            value={inputValue}\n            onChange={handleInputChange}\n          />\n        </form>\n      </header>\n    </>\n  );\n};\n\nSearchBar.propTypes = {\n  handleFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import PropTypes from \"prop-types\";\n\nconst Modal = ({ largeImageURL, handleModalClose }) => {\n  return (\n    <div className=\"Overlay\" onClick={handleModalClose}>\n      <div className=\"Modal\">\n        <img src={largeImageURL} alt={largeImageURL} />\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  handleModalClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"../Modal\";\n\nconst ImageGalleryItem = ({ largeImageURL, webformatURL, tags }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleModalOpen = () => {\n    setIsOpen(true);\n  };\n\n  const handleModalClose = ({ target }) => {\n    if (target.className === \"Overlay\") {\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={webformatURL}\n        alt={[tags]}\n        className=\"ImageGalleryItem-image\"\n        onClick={handleModalOpen}\n      />\n      {isOpen && (\n        <Modal\n          largeImageURL={largeImageURL}\n          handleModalClose={handleModalClose}\n        />\n      )}\n    </li>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  largeImageURL: PropTypes.string,\n  webformatURL: PropTypes.string,\n  tags: PropTypes.string,\n};\n\nImageGalleryItem.defaultProps = {\n  largeImageURL: \"https://i.stack.imgur.com/l60Hf.png\",\n  webformatURL: \"https://i.stack.imgur.com/l60Hf.png\",\n};\n\nexport default ImageGalleryItem;\n","import Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst Spinner = () => {\n  return (\n    <Loader\n      className=\"loader\"\n      type=\"TailSpin\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n      delay={200}\n    />\n  );\n};\n\nexport default Spinner;\n","import PropTypes from \"prop-types\";\n\nconst Button = ({ handleLoadMoreImages }) => {\n  const handleLoadMore = () => {\n    handleLoadMoreImages();\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <button className=\"Button\" onClick={() => handleLoadMore()}>\n      Load more\n    </button>\n  );\n};\n\nButton.propTypes = {\n  handleLoadMoreImages: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport ImageGalleryItem from \"../ImageGalleryItem\";\nimport Spinner from \"../Spinner\";\nimport Button from \"../Button\";\n\nconst ImageGallery = ({ inputValue }) => {\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n\n  const apiKey = \"19918904-c3236105177a74f036d1e644e\";\n\n  useEffect(() => {\n    setImages([]);\n    setPage(1);\n  }, [inputValue]);\n\n  useEffect(() => {\n    try {\n      axios\n        .get(\n          `https://pixabay.com/api/?q=${inputValue}&page=${page}&key=${apiKey}&image_type=photo&orientation=horizontal&per_page=12`\n        )\n        .then((response) => {\n          setLoading(false);\n          setImages((images) => [...images, ...response.data.hits]);\n        });\n    } catch ({ message }) {\n      console.log(message);\n    }\n  }, [inputValue, page]);\n\n  const handleLoadMoreImages = () => {\n    setPage(page + 1);\n  };\n\n  return (\n    <>\n      <ul className=\"ImageGallery\">\n        {loading ? (\n          <Spinner />\n        ) : (\n          images.map(({ id, largeImageURL, webformatURL, tags }) => {\n            return (\n              <ImageGalleryItem\n                key={id}\n                largeImageURL={largeImageURL}\n                webformatURL={webformatURL}\n                tags={tags}\n              />\n            );\n          })\n        )}\n      </ul>\n      {inputValue && <Button handleLoadMoreImages={handleLoadMoreImages} />}\n    </>\n  );\n};\n\nImageGallery.propTypes = {\n  inputValue: PropTypes.string.isRequired,\n};\n\nexport default ImageGallery;\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nimport SearchBar from \"./components/SearchBar/index\";\nimport ImageGallery from \"./components/ImageGallery\";\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  useEffect(() => {\n    setInputValue(inputValue);\n  }, [inputValue]);\n\n  const handleFormSubmit = (value) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div className=\"app\">\n      <SearchBar handleFormSubmit={handleFormSubmit} />\n      {inputValue && <ImageGallery inputValue={inputValue} />}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}